import { createDraft, finishDraft } from 'immer';
export class ImmutableStateContext {
    ctx;
    frozenState = null;
    constructor(ctx) {
        this.ctx = ctx;
        ImmutableStateContext.autobindStateContext(this);
    }
    static autobindStateContext(context) {
        for (const prop of Object.getOwnPropertyNames(Object.getPrototypeOf(context))) {
            if (prop === 'constructor' || typeof context[prop] !== 'function') {
                continue;
            }
            context[prop] = context[prop].bind(context);
        }
    }
    getState() {
        this.frozenState = createDraft(this.ctx.getState());
        return this.frozenState;
    }
    setState(val) {
        let state;
        if (typeof val === 'function') {
            let newState;
            const oldState = createDraft(this.ctx.getState());
            const operator = val;
            const mutatedOldState = operator(oldState);
            if (this.frozenState === mutatedOldState) {
                newState = finishDraft(this.frozenState);
                finishDraft(oldState);
            }
            else {
                const mutateOutsideOperator = oldState !== mutatedOldState;
                if (mutateOutsideOperator) {
                    newState = mutatedOldState;
                    finishDraft(oldState);
                }
                else {
                    newState = finishDraft(mutatedOldState);
                }
            }
            state = newState;
        }
        else {
            state = finishDraft(val);
        }
        this.frozenState = null;
        return this.ctx.setState(state);
    }
    patchState(val) {
        return this.ctx.patchState(finishDraft(val));
    }
    dispatch(actions) {
        return this.ctx.dispatch(actions);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1tdXRhYmxlLXN0YXRlLWNvbnRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWIvY29yZS9pbW1lci1hZGFwdGVyL2NvbW1vbi9pbW11dGFibGUtc3RhdGUtY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBYSxNQUFNLE9BQU8sQ0FBQztBQUc1RCxNQUFNLE9BQU8scUJBQXFCO0lBR1o7SUFGWixXQUFXLEdBQWEsSUFBSSxDQUFDO0lBRXJDLFlBQW9CLEdBQW9CO1FBQXBCLFFBQUcsR0FBSCxHQUFHLENBQWlCO1FBQ3RDLHFCQUFxQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBWTtRQUM5QyxLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM5RSxJQUFJLElBQUksS0FBSyxhQUFhLElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxFQUFFLENBQUM7Z0JBQ2xFLFNBQVM7WUFDWCxDQUFDO1lBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUMsQ0FBQztJQUNILENBQUM7SUFFTSxRQUFRO1FBQ2IsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQWUsQ0FBTSxDQUFDO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQXlCO1FBQ3ZDLElBQUksS0FBVSxDQUFDO1FBRWYsSUFBSSxPQUFPLEdBQUcsS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUM5QixJQUFJLFFBQVEsQ0FBQztZQUNiLE1BQU0sUUFBUSxHQUFxQixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQWUsQ0FBcUIsQ0FBQztZQUNyRyxNQUFNLFFBQVEsR0FBcUIsR0FBdUIsQ0FBQztZQUMzRCxNQUFNLGVBQWUsR0FBTSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFOUMsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLGVBQWUsRUFBRSxDQUFDO2dCQUN6QyxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDekMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixNQUFNLHFCQUFxQixHQUFZLFFBQVEsS0FBSyxlQUFlLENBQUM7Z0JBQ3BFLElBQUkscUJBQXFCLEVBQUUsQ0FBQztvQkFDMUIsUUFBUSxHQUFHLGVBQWUsQ0FBQztvQkFDM0IsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN4QixDQUFDO3FCQUFNLENBQUM7b0JBQ04sUUFBUSxHQUFHLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDMUMsQ0FBQztZQUNILENBQUM7WUFFRCxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ25CLENBQUM7YUFBTSxDQUFDO1lBQ04sS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixDQUFDO1FBRUQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sVUFBVSxDQUFDLEdBQWU7UUFDL0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFlLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU0sUUFBUSxDQUFDLE9BQW9CO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVDb250ZXh0LCBTdGF0ZU9wZXJhdG9yIH0gZnJvbSAnQG5neHMvc3RvcmUnO1xyXG5pbXBvcnQgeyBFeGlzdGluZ1N0YXRlIH0gZnJvbSAnQG5neHMvc3RvcmUvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgY3JlYXRlRHJhZnQsIGZpbmlzaERyYWZ0LCBPYmplY3Rpc2ggfSBmcm9tICdpbW1lcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJbW11dGFibGVTdGF0ZUNvbnRleHQ8VCBleHRlbmRzIGFueT4gaW1wbGVtZW50cyBTdGF0ZUNvbnRleHQ8VD4ge1xyXG4gIHByaXZhdGUgZnJvemVuU3RhdGU6IFQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjdHg6IFN0YXRlQ29udGV4dDxUPikge1xyXG4gICAgSW1tdXRhYmxlU3RhdGVDb250ZXh0LmF1dG9iaW5kU3RhdGVDb250ZXh0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXV0b2JpbmRTdGF0ZUNvbnRleHQoY29udGV4dDogYW55KTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKGNvbnRleHQpKSkge1xyXG4gICAgICBpZiAocHJvcCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCB0eXBlb2YgY29udGV4dFtwcm9wXSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb250ZXh0W3Byb3BdID0gY29udGV4dFtwcm9wXS5iaW5kKGNvbnRleHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFN0YXRlKCk6IFQge1xyXG4gICAgdGhpcy5mcm96ZW5TdGF0ZSA9IGNyZWF0ZURyYWZ0KHRoaXMuY3R4LmdldFN0YXRlKCkgYXMgT2JqZWN0aXNoKSBhcyBUO1xyXG4gICAgcmV0dXJuIHRoaXMuZnJvemVuU3RhdGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0U3RhdGUodmFsOiBUIHwgU3RhdGVPcGVyYXRvcjxUPik6IHZvaWQge1xyXG4gICAgbGV0IHN0YXRlOiBhbnk7XHJcblxyXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgbGV0IG5ld1N0YXRlO1xyXG4gICAgICBjb25zdCBvbGRTdGF0ZTogRXhpc3RpbmdTdGF0ZTxUPiA9IGNyZWF0ZURyYWZ0KHRoaXMuY3R4LmdldFN0YXRlKCkgYXMgT2JqZWN0aXNoKSBhcyBFeGlzdGluZ1N0YXRlPFQ+O1xyXG4gICAgICBjb25zdCBvcGVyYXRvcjogU3RhdGVPcGVyYXRvcjxUPiA9IHZhbCBhcyBTdGF0ZU9wZXJhdG9yPFQ+O1xyXG4gICAgICBjb25zdCBtdXRhdGVkT2xkU3RhdGU6IFQgPSBvcGVyYXRvcihvbGRTdGF0ZSk7XHJcblxyXG4gICAgICBpZiAodGhpcy5mcm96ZW5TdGF0ZSA9PT0gbXV0YXRlZE9sZFN0YXRlKSB7XHJcbiAgICAgICAgbmV3U3RhdGUgPSBmaW5pc2hEcmFmdCh0aGlzLmZyb3plblN0YXRlKTtcclxuICAgICAgICBmaW5pc2hEcmFmdChvbGRTdGF0ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbXV0YXRlT3V0c2lkZU9wZXJhdG9yOiBib29sZWFuID0gb2xkU3RhdGUgIT09IG11dGF0ZWRPbGRTdGF0ZTtcclxuICAgICAgICBpZiAobXV0YXRlT3V0c2lkZU9wZXJhdG9yKSB7XHJcbiAgICAgICAgICBuZXdTdGF0ZSA9IG11dGF0ZWRPbGRTdGF0ZTtcclxuICAgICAgICAgIGZpbmlzaERyYWZ0KG9sZFN0YXRlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbmV3U3RhdGUgPSBmaW5pc2hEcmFmdChtdXRhdGVkT2xkU3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc3RhdGUgPSBuZXdTdGF0ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0YXRlID0gZmluaXNoRHJhZnQodmFsKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZyb3plblN0YXRlID0gbnVsbDtcclxuICAgIHJldHVybiB0aGlzLmN0eC5zZXRTdGF0ZShzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGF0Y2hTdGF0ZSh2YWw6IFBhcnRpYWw8VD4pOiB2b2lkIHtcclxuICAgIHJldHVybiB0aGlzLmN0eC5wYXRjaFN0YXRlKGZpbmlzaERyYWZ0KHZhbCkgYXMgUGFydGlhbDxUPik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcGF0Y2goYWN0aW9uczogYW55IHwgYW55W10pOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLmN0eC5kaXNwYXRjaChhY3Rpb25zKTtcclxuICB9XHJcbn1cclxuIl19